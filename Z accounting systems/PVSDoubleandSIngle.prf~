(accounting
 (blank_TCC1 0
  (blank_TCC1-1 nil 3749791949 ("" (existence-tcc) nil nil) nil nil))
 (one_point 0
  (one_point-1 nil 3749794951 ("" (grind) nil nil)
   ((DATE type-decl nil accounting nil)
    (ACCOUNT type-decl nil accounting nil)
    (TEXT type-decl nil accounting nil)
    (MONEY type-decl nil accounting nil)
    (Transaction type-eq-decl nil accounting nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (DSB_Type type-eq-decl nil accounting nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (singfs const-decl "finseq[T]" accounting nil)
    (restrict const-decl "R" restrict nil)
    (O const-decl "finseq" finite_sequences nil))
   shostak))
 (double_one_point 0
  (double_one_point-1 nil 3749795004 ("" (grind) nil nil)
   ((DATE type-decl nil accounting nil)
    (ACCOUNT type-decl nil accounting nil)
    (MONEY type-decl nil accounting nil)
    (TEXT type-decl nil accounting nil)
    (DoubleTransactionType type-eq-decl nil accounting nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (blank const-decl "MONEY" accounting nil)
    (DoubleTransaction type-eq-decl nil accounting nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (DSDB_Type type-eq-decl nil accounting nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (singfs const-decl "finseq[T]" accounting nil)
    (restrict const-decl "R" restrict nil)
    (O const-decl "finseq" finite_sequences nil))
   shostak))
 (R_TCC1 0 (R_TCC1-2 "" 3749887860 ("" (grind) nil nil) nil shostak)
  (R_TCC1-1 nil 3749791949 ("" (subtype-tcc) nil nil)
   ((below type-eq-decl nil nat_types nil)
    (RType type-eq-decl nil accounting nil)
    (DoubleTransaction type-eq-decl nil accounting nil)
    (DoubleTransactionType type-eq-decl nil accounting nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Transaction type-eq-decl nil accounting nil)
    (/= const-decl "boolean" notequal nil)
    (blank const-decl "MONEY" accounting nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TType type-eq-decl nil accounting nil)
    (MONEY type-decl nil accounting nil)
    (TEXT type-decl nil accounting nil)
    (DATE type-decl nil accounting nil)
    (ACCOUNT type-decl nil accounting nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (initialisation 0
  (initialisation-1 nil 3749887865 ("" (grind) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (TType type-eq-decl nil accounting nil)
    (MONEY type-decl nil accounting nil)
    (TEXT type-decl nil accounting nil)
    (DATE type-decl nil accounting nil)
    (ACCOUNT type-decl nil accounting nil)
    (below type-eq-decl nil nat_types nil)
    (FALSE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (blank const-decl "MONEY" accounting nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Transaction type-eq-decl nil accounting nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (R const-decl "setof[RType]" accounting nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (applicability 0
  (applicability-1 nil 3749798631 ("" (grind) nil nil)
   ((R const-decl "setof[RType]" accounting nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak))
 (correctness_TCC1 0
  (correctness_TCC1-1 nil 3749791949 ("" (grind) nil nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (Transaction type-eq-decl nil accounting nil)
    (/= const-decl "boolean" notequal nil)
    (blank const-decl "MONEY" accounting nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TType type-eq-decl nil accounting nil)
    (MONEY type-decl nil accounting nil)
    (TEXT type-decl nil accounting nil)
    (DATE type-decl nil accounting nil)
    (ACCOUNT type-decl nil accounting nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (correctness_TCC2 0
  (correctness_TCC2-1 nil 3749791949 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (ACCOUNT type-decl nil accounting nil)
    (DATE type-decl nil accounting nil)
    (TEXT type-decl nil accounting nil)
    (MONEY type-decl nil accounting nil)
    (TType type-eq-decl nil accounting nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (blank const-decl "MONEY" accounting nil)
    (Transaction type-eq-decl nil accounting nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (/= const-decl "boolean" notequal nil)
    (singfs const-decl "finseq[T]" accounting nil)
    (restrict const-decl "R" restrict nil)
    (O const-decl "finseq" finite_sequences nil))
   nil))
 (correctness 0
  (correctness-2 "" 3749817341
   ("" (skolem!)
    (("" (flatten)
      (("" (grind) (("1" (postpone) nil nil) ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak)
  (correctness-1 nil 3749791955
   ("" (skolem!)
    (("" (flatten)
      ((""
        (inst 1 "saccount!1 o
            singfs((# date := date?!1,
                      description := description?!1,
                      account := account?!1,
                      income := income?!1,
                      expenditure := expenditure?!1 #))")
        (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (restrict const-decl "R" restrict nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (singfs const-decl "finseq[T]" accounting nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Transaction type-eq-decl nil accounting nil)
    (MONEY type-decl nil accounting nil)
    (TEXT type-decl nil accounting nil)
    (DATE type-decl nil accounting nil)
    (ACCOUNT type-decl nil accounting nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak)))


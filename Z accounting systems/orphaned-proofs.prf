("PVSaccounting" accounting one_point 0 (one_point-1 nil 3749195269 ("" (grind) nil nil) ((DATE type-decl nil accounting nil) (MONEY type-decl nil accounting nil) (TEXT type-decl nil accounting nil) (Transaction_0 type-eq-decl nil accounting nil) (finseq type-eq-decl nil finite_sequences nil) (DSB_Type type-eq-decl nil accounting nil) (singfs const-decl "finseq[T]" accounting nil) (restrict const-decl "R" restrict nil) (O const-decl "finseq" finite_sequences nil)) shostak))("Copy of PVSaccounting (conflict from 10-24-2018 at 16h03)" accounting correctness_TCC3 0 (correctness_TCC3-1 nil 3749457789 ("" (subtype-tcc) nil nil) nil nil))("Copy of Copy of PVSaccounting (conflict from 10-24-2018 at 16h03) (conflict from 10-25-2018 at 14h54)" accounting blank_TCC1 0 (blank_TCC1-1 nil 3749464693 ("" (existence-tcc) nil nil) nil nil))("Copy of Copy of PVSaccounting (conflict from 10-24-2018 at 16h03) (conflict from 10-25-2018 at 14h54)" accounting R_TCC1 0 (R_TCC1-1 nil 3749464693 ("" (subtype-tcc) nil nil) nil nil))("Copy of Copy of PVSaccounting (conflict from 10-24-2018 at 16h03) (conflict from 10-25-2018 at 14h54)" accounting correctness_TCC1 0 (correctness_TCC1-1 nil 3749464693 ("" (subtype-tcc) nil nil) nil nil))("Copy of Copy of PVSaccounting (conflict from 10-24-2018 at 16h03) (conflict from 10-25-2018 at 14h54)" accounting correctness_TCC2 0 (correctness_TCC2-1 nil 3749464693 ("" (subtype-tcc) nil nil) nil nil))("Copy of Copy of PVSaccounting (conflict from 10-24-2018 at 16h03) (conflict from 10-25-2018 at 14h54)" accounting correctness 0 (correctness-1 nil 3749464696 ("" (grind) (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil) nil shostak))("PVSSingle" accounting one_point 0 (one_point-1 nil 3749544765 ("" (grind) nil nil) ((DATE type-decl nil accounting nil) (ACCOUNT type-decl nil accounting nil) (TEXT type-decl nil accounting nil) (MONEY type-decl nil accounting nil) (TType type-eq-decl nil accounting nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (Transaction type-eq-decl nil accounting nil) (finseq type-eq-decl nil finite_sequences nil) (DSB_Type type-eq-decl nil accounting nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (singfs const-decl "finseq[T]" accounting nil) (restrict const-decl "R" restrict nil) (O const-decl "finseq" finite_sequences nil)) shostak))("Copy of Copy of PVSaccounting (conflict from 10-24-2018 at 16h03) (conflict from 10-25-2018 at 14h54)" accounting blank_TCC1 0 (blank_TCC1-1 nil 3749464693 ("" (existence-tcc) nil nil) nil nil))("Copy of Copy of PVSaccounting (conflict from 10-24-2018 at 16h03) (conflict from 10-25-2018 at 14h54)" accounting R_TCC1 0 (R_TCC1-1 nil 3749464693 ("" (subtype-tcc) nil nil) nil nil))("Copy of Copy of PVSaccounting (conflict from 10-24-2018 at 16h03) (conflict from 10-25-2018 at 14h54)" accounting correctness_TCC1 0 (correctness_TCC1-1 nil 3749464693 ("" (subtype-tcc) nil nil) nil nil))("Copy of Copy of PVSaccounting (conflict from 10-24-2018 at 16h03) (conflict from 10-25-2018 at 14h54)" accounting correctness_TCC2 0 (correctness_TCC2-1 nil 3749464693 ("" (subtype-tcc) nil nil) nil nil))("Copy of Copy of PVSaccounting (conflict from 10-24-2018 at 16h03) (conflict from 10-25-2018 at 14h54)" accounting correctness 0 (correctness-1 nil 3749464696 ("" (grind) (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil) nil shostak))("PVSDoubleandSIngle" accounting correctness_TCC4 0 (correctness_TCC4-1 nil 3749791949 ("" (subtype-tcc) nil nil) nil nil))("PVSDoubleandSIngle" accounting correctness_TCC3 0 (correctness_TCC3-1 nil 3749791949 ("" (subtype-tcc) nil nil) nil nil))("PVSDoubleandSIngle" accounting correctness_TCC2 0 (correctness_TCC2-1 nil 3749791949 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (ACCOUNT type-decl nil accounting nil) (DATE type-decl nil accounting nil) (TEXT type-decl nil accounting nil) (MONEY type-decl nil accounting nil) (TType type-eq-decl nil accounting nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (blank const-decl "MONEY" accounting nil) (Transaction type-eq-decl nil accounting nil) (finseq type-eq-decl nil finite_sequences nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (/= const-decl "boolean" notequal nil) (singfs const-decl "finseq[T]" accounting nil) (restrict const-decl "R" restrict nil) (O const-decl "finseq" finite_sequences nil)) nil))("PVSDoubleandSIngle" accounting correctness_TCC1 0 (correctness_TCC1-1 nil 3749791949 ("" (grind) nil nil) ((finseq type-eq-decl nil finite_sequences nil) (Transaction type-eq-decl nil accounting nil) (/= const-decl "boolean" notequal nil) (blank const-decl "MONEY" accounting nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (TType type-eq-decl nil accounting nil) (MONEY type-decl nil accounting nil) (TEXT type-decl nil accounting nil) (DATE type-decl nil accounting nil) (ACCOUNT type-decl nil accounting nil) (below type-eq-decl nil nat_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil))("PVSDoubleandSIngle" accounting blank_TCC1 0 (blank_TCC1-1 nil 3749791949 ("" (existence-tcc) nil nil) nil nil))("PVSDoubleandSIngle" accounting one_point 0 (one_point-1 nil 3749794951 ("" (grind) nil nil) ((DATE type-decl nil accounting nil) (ACCOUNT type-decl nil accounting nil) (TEXT type-decl nil accounting nil) (MONEY type-decl nil accounting nil) (Transaction type-eq-decl nil accounting nil) (finseq type-eq-decl nil finite_sequences nil) (DSB_Type type-eq-decl nil accounting nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (singfs const-decl "finseq[T]" accounting nil) (restrict const-decl "R" restrict nil) (O const-decl "finseq" finite_sequences nil)) shostak))("PVSDoubleandSIngle" accounting double_one_point 0 (double_one_point-1 nil 3749795004 ("" (grind) nil nil) ((DATE type-decl nil accounting nil) (ACCOUNT type-decl nil accounting nil) (MONEY type-decl nil accounting nil) (TEXT type-decl nil accounting nil) (DoubleTransactionType type-eq-decl nil accounting nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (DoubleTransaction type-eq-decl nil accounting nil) (finseq type-eq-decl nil finite_sequences nil) (DSDB_Type type-eq-decl nil accounting nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (singfs const-decl "finseq[T]" accounting nil) (restrict const-decl "R" restrict nil) (O const-decl "finseq" finite_sequences nil)) shostak))("PVSDoubleandSIngle" accounting R_TCC1 0 (R_TCC1-2 "" 3749887860 ("" (grind) nil nil) nil shostak) (R_TCC1-1 nil 3749791949 ("" (subtype-tcc) nil nil) ((below type-eq-decl nil nat_types nil) (RType type-eq-decl nil accounting nil) (DoubleTransaction type-eq-decl nil accounting nil) (DoubleTransactionType type-eq-decl nil accounting nil) (finseq type-eq-decl nil finite_sequences nil) (Transaction type-eq-decl nil accounting nil) (/= const-decl "boolean" notequal nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (TType type-eq-decl nil accounting nil) (MONEY type-decl nil accounting nil) (TEXT type-decl nil accounting nil) (DATE type-decl nil accounting nil) (ACCOUNT type-decl nil accounting nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil))("PVSDoubleandSIngle" accounting R__TCC1 0 (R__TCC1-1 nil 3749972793 ("" (subtype-tcc) nil nil) nil nil))("PVSDoubleandSIngle" accounting initialisation 0 (initialisation-1 nil 3749887865 ("" (grind) nil nil) ((TRUE const-decl "bool" booleans nil) (TType type-eq-decl nil accounting nil) (MONEY type-decl nil accounting nil) (TEXT type-decl nil accounting nil) (DATE type-decl nil accounting nil) (ACCOUNT type-decl nil accounting nil) (below type-eq-decl nil nat_types nil) (FALSE const-decl "bool" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (Transaction type-eq-decl nil accounting nil) (finseq type-eq-decl nil finite_sequences nil) (empty_seq const-decl "finseq" finite_sequences nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (R const-decl "setof[RType]" accounting nil) (/= const-decl "boolean" notequal nil)) shostak))("PVSDoubleandSIngle" accounting applicability 0 (applicability-1 nil 3749798631 ("" (grind) nil nil) ((XOR const-decl "bool" xor_def nil) (/= const-decl "boolean" notequal nil) (R const-decl "setof[RType]" accounting nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) shostak))("PVSDoubleandSIngle" accounting correctness 0 (correctness-2 "" 3749817341 ("" (skolem!) (("" (flatten) (("" (assert) (("" (inst 1 "saccount!1 o
                 singfs((# date := date?!1,
                           description := description?!1,
                           account := account?!1,
                           income := income?!1,
                           expenditure := expenditure?!1 #))") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ((expenditure?!1 skolem-const-decl "MONEY" accounting nil) (income?!1 skolem-const-decl "MONEY" accounting nil) (account?!1 skolem-const-decl "ACCOUNT" accounting nil) (description?!1 skolem-const-decl "TEXT" accounting nil) (date?!1 skolem-const-decl "DATE" accounting nil) (singfs const-decl "finseq[T]" accounting nil) (saccount!1 skolem-const-decl "finseq[Transaction]" accounting nil) (Transaction type-eq-decl nil accounting nil) (/= const-decl "boolean" notequal nil) (blank adt-constructor-decl "(blank?)" accounting nil) (blank? adt-recognizer-decl "[MONEY -> boolean]" accounting nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (XOR const-decl "bool" xor_def nil) (O const-decl "finseq" finite_sequences nil) (finseq type-eq-decl nil finite_sequences nil) (TType type-eq-decl nil accounting nil) (MONEY type-decl nil accounting nil) (TEXT type-decl nil accounting nil) (DATE type-decl nil accounting nil) (ACCOUNT type-decl nil accounting nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (R const-decl "setof[RType]" accounting nil) (restrict const-decl "R" restrict nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (DoubleTransactionType type-eq-decl nil accounting nil) (DoubleTransaction type-eq-decl nil accounting nil) (daccount!1 skolem-const-decl "finseq[DoubleTransaction]" accounting nil) (NOT const-decl "[bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak) (correctness-1 nil 3749791955 ("" (skolem!) (("" (flatten) (("" (inst 1 "saccount!1 o
            singfs((# date := date?!1,
                      description := description?!1,
                      account := account?!1,
                      income := income?!1,
                      expenditure := expenditure?!1 #))") (("" (grind) nil nil)) nil)) nil)) nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (restrict const-decl "R" restrict nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (singfs const-decl "finseq[T]" accounting nil) (O const-decl "finseq" finite_sequences nil) (finseq type-eq-decl nil finite_sequences nil) (Transaction type-eq-decl nil accounting nil) (MONEY type-decl nil accounting nil) (TEXT type-decl nil accounting nil) (DATE type-decl nil accounting nil) (ACCOUNT type-decl nil accounting nil) (below type-eq-decl nil nat_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) shostak))("FInalPVSDoubleandSIngle" accounting one_point 0 (one_point-1 nil 3750401536 ("" (grind) (("" (postpone) nil nil)) nil) nil shostak))("FInalPVSDoubleandSIngle" accounting one_point_TCC1 0 (one_point_TCC1-1 nil 3750401530 ("" (subtype-tcc) nil nil) nil nil))("FInalPVSDoubleandSIngle" accounting correctness 0 (correctness-1 nil 3750407567 ("" (skolem!) (("" (flatten) (("" (inst 1 "o(saccount!1, singfs((# date := date?!1,description := description?!1, account := account?!1, income := income?!1, expenditure := expenditure?!1 #)))") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil) ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (NOT const-decl "[bool -> bool]" booleans nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (DoSomeDoubleBusiness const-decl "setof[DSDB_Type]" accounting nil) (restrict const-decl "R" restrict nil) (preDoSomeBusiness const-decl "setof[pDSBType]" accounting nil) (R const-decl "setof[RType]" accounting nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (ConfInputs const-decl "setof[ConfInputsType]" accounting nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (DoSomeBusiness const-decl "setof[DSBType]" accounting nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (ACCOUNT type-decl nil accounting nil) (DATE type-decl nil accounting nil) (TEXT type-decl nil accounting nil) (MONEY type-decl nil accounting nil) (TType type-eq-decl nil accounting nil) (finseq type-eq-decl nil finite_sequences nil) (O const-decl "finseq" finite_sequences nil) (XOR const-decl "bool" xor_def nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (blank const-decl "MONEY" accounting nil) (/= const-decl "boolean" notequal nil) (TransactionAsType type-eq-decl nil accounting nil) (singfs const-decl "finseq[T]" accounting nil)) shostak))("FInalPVSDoubleandSIngle" accounting applicability 0 (applicability-1 nil 3750398054 ("" (grind) nil nil) ((TType type-eq-decl nil accounting nil) (finseq type-eq-decl nil finite_sequences nil) (blank const-decl "MONEY" accounting nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (DoubleTransactionType type-eq-decl nil accounting nil) (TEXT type-decl nil accounting nil) (DATE type-decl nil accounting nil) (MONEY type-decl nil accounting nil) (ACCOUNT type-decl nil accounting nil) (below type-eq-decl nil nat_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (ConfInputs const-decl "setof[ConfInputsType]" accounting nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (R const-decl "setof[RType]" accounting nil) (/= const-decl "boolean" notequal nil) (XOR const-decl "bool" xor_def nil)) shostak))("FInalPVSDoubleandSIngle" accounting initialisation 0 (initialisation-1 nil 3750398046 ("" (grind) nil nil) ((TRUE const-decl "bool" booleans nil) (TType type-eq-decl nil accounting nil) (MONEY type-decl nil accounting nil) (TEXT type-decl nil accounting nil) (DATE type-decl nil accounting nil) (ACCOUNT type-decl nil accounting nil) (below type-eq-decl nil nat_types nil) (FALSE const-decl "bool" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (blank const-decl "MONEY" accounting nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (NOT const-decl "[bool -> bool]" booleans nil) (finseq type-eq-decl nil finite_sequences nil) (empty_seq const-decl "finseq" finite_sequences nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (R const-decl "setof[RType]" accounting nil) (XOR const-decl "bool" xor_def nil) (/= const-decl "boolean" notequal nil)) shostak))